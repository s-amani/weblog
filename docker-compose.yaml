services:
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=POSTGRES_PASSWORD
    ports:
      - 5432:5432
    volumes:
      - /var/lib/postgresql/data
  mongodb:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongopw
    ports:
      - 27017:27017
    volumes:
      - /var/lib/mongodb/data
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports: 
      - 6379:6379
    networks:
      - app_network  # Connect to the same network as the Redis service
  redisinsight:
    image: redis/redisinsight:latest  # Use the RedisInsight image
    container_name: redis_insight  # Optional: name your RedisInsight container
    ports:
      - "8001:8001"  # Map RedisInsight web UI port
    depends_on:
      - redis
    networks:
      - app_network  # Connect to the same network as the Redis service

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8080:8080"
    depends_on:
      - kafka

# volumes:
#   pgdata:
#   mongodata:

networks:
  app_network:  # Define a custom network to allow the services to communicate
    driver: bridge